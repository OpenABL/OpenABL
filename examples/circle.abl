agent Point {
  position float2 pos;
}

// Density of agents
param float rho = 0.01;
// Number of timesteps
param int num_timesteps = 100;
// Number of agents
param int num_agents = 1000;

// Repulsive force parameter
float k_rep = 0.1;
// Attractive force parameter
float k_att = 0.05;
// Radius of agent (radius of repulsion)
float r = 5;
// Choose environment size to satisfy given
// number of agents and density
float W = sqrt(num_agents / rho);

// Specify environment size
environment { max: float2(W) }

// Step function
void move_point(Point in -> out) {
  float2 new_pos = in.pos;
  for (Point nx : near(in, 2*r)) {
    float pos_dist = dist(in.pos, nx.pos);
    float sep_dist = pos_dist - r;
    float2 force = float2(0.0);
    if (sep_dist < r) {
      float k = sep_dist > 0.0 ? k_att : -k_rep;
      // r or pos_dist here?
      force = k * sep_dist * (in.pos - nx.pos) / r;
    }
    new_pos += force;
  }
  out.pos = clamp(new_pos, float2(W));
}

void main() {
  // initialization (sequential)
  for (int i : 0..num_agents) {
    add(Point {
      pos: random(float2(W))
    });
  }

  // simulation (parallel)
  simulate(num_timesteps) { move_point }

  save("points.json");
}
