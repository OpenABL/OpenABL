/* Copyright 2017 OpenABL Contributors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

agent Cell {
  position float2 pos;
  bool alive;
}

// For visualization
int getColor(Cell cell) {
  return cell.alive ? 0 : 0xbbbbbb;
}

// Should be > sqrt(2) and < 2 so as to catch only
// the neighbors
float radius = 1.5;

// Debug initialization
param bool debug = false;

param float alive_fraction = 0.1;

// Number of agents is only a hint,
// we'll pick a square field size based on it
param int num_agents = 20*20;
param int num_timesteps = 100;

int size = int(sqrt(num_agents));

environment {
  max: float2(size)
}

step step_move(Cell in -> out) {
  // Number of live neighbors *INCLUDING* current cell
  int living_neighbors = 0;

  for (Cell nx : near(in, radius)) {
    living_neighbors += nx.alive?1:0;
  }

  if (in.alive) {
    living_neighbors -= 1;
    out.alive = living_neighbors >= 2 && living_neighbors <= 3;
  } else {
    out.alive = living_neighbors == 3;
  }

  out.pos=in.pos;//fix an issue in Dmason backend
}

bool getInit(int x, int y) {
  if (debug) {
    // Good initialization for testing
    return (x == 10 || x == 11 || x == 12) && y == 10;
  } else {
    // Random initialization
    return random(0, 1) < alive_fraction;
  }
}

void main() {
  // TODO Reasonable initialization
  for (int x : 0..size) {
    for (int y : 0..size) {
      add(Cell {
        pos: float2(x + 0.5, y + 0.5),
        alive: getInit(x, y)
      });
    }
  }

  simulate(num_timesteps) { step_move }

  save("result.json");
}
